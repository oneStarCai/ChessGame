// Code generated by entc, DO NOT EDIT.

package droom

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/orestonce/ChessGame/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IsGameRunning applies equality check predicate on the "is_game_running" field. It's identical to IsGameRunningEQ.
func IsGameRunning(v bool) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGameRunning), v))
	})
}

// Panel applies equality check predicate on the "panel" field. It's identical to PanelEQ.
func Panel(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPanel), v))
	})
}

// WUserID applies equality check predicate on the "w_user_id" field. It's identical to WUserIDEQ.
func WUserID(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWUserID), v))
	})
}

// BUserID applies equality check predicate on the "b_user_id" field. It's identical to BUserIDEQ.
func BUserID(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBUserID), v))
	})
}

// NextTurnUserID applies equality check predicate on the "next_turn_user_id" field. It's identical to NextTurnUserIDEQ.
func NextTurnUserID(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextTurnUserID), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// IsGameRunningEQ applies the EQ predicate on the "is_game_running" field.
func IsGameRunningEQ(v bool) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsGameRunning), v))
	})
}

// IsGameRunningNEQ applies the NEQ predicate on the "is_game_running" field.
func IsGameRunningNEQ(v bool) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsGameRunning), v))
	})
}

// IsGameRunningIsNil applies the IsNil predicate on the "is_game_running" field.
func IsGameRunningIsNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsGameRunning)))
	})
}

// IsGameRunningNotNil applies the NotNil predicate on the "is_game_running" field.
func IsGameRunningNotNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsGameRunning)))
	})
}

// PanelEQ applies the EQ predicate on the "panel" field.
func PanelEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPanel), v))
	})
}

// PanelNEQ applies the NEQ predicate on the "panel" field.
func PanelNEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPanel), v))
	})
}

// PanelIn applies the In predicate on the "panel" field.
func PanelIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPanel), v...))
	})
}

// PanelNotIn applies the NotIn predicate on the "panel" field.
func PanelNotIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPanel), v...))
	})
}

// PanelGT applies the GT predicate on the "panel" field.
func PanelGT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPanel), v))
	})
}

// PanelGTE applies the GTE predicate on the "panel" field.
func PanelGTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPanel), v))
	})
}

// PanelLT applies the LT predicate on the "panel" field.
func PanelLT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPanel), v))
	})
}

// PanelLTE applies the LTE predicate on the "panel" field.
func PanelLTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPanel), v))
	})
}

// PanelContains applies the Contains predicate on the "panel" field.
func PanelContains(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPanel), v))
	})
}

// PanelHasPrefix applies the HasPrefix predicate on the "panel" field.
func PanelHasPrefix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPanel), v))
	})
}

// PanelHasSuffix applies the HasSuffix predicate on the "panel" field.
func PanelHasSuffix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPanel), v))
	})
}

// PanelIsNil applies the IsNil predicate on the "panel" field.
func PanelIsNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPanel)))
	})
}

// PanelNotNil applies the NotNil predicate on the "panel" field.
func PanelNotNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPanel)))
	})
}

// PanelEqualFold applies the EqualFold predicate on the "panel" field.
func PanelEqualFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPanel), v))
	})
}

// PanelContainsFold applies the ContainsFold predicate on the "panel" field.
func PanelContainsFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPanel), v))
	})
}

// WUserIDEQ applies the EQ predicate on the "w_user_id" field.
func WUserIDEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWUserID), v))
	})
}

// WUserIDNEQ applies the NEQ predicate on the "w_user_id" field.
func WUserIDNEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWUserID), v))
	})
}

// WUserIDIn applies the In predicate on the "w_user_id" field.
func WUserIDIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWUserID), v...))
	})
}

// WUserIDNotIn applies the NotIn predicate on the "w_user_id" field.
func WUserIDNotIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWUserID), v...))
	})
}

// WUserIDGT applies the GT predicate on the "w_user_id" field.
func WUserIDGT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWUserID), v))
	})
}

// WUserIDGTE applies the GTE predicate on the "w_user_id" field.
func WUserIDGTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWUserID), v))
	})
}

// WUserIDLT applies the LT predicate on the "w_user_id" field.
func WUserIDLT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWUserID), v))
	})
}

// WUserIDLTE applies the LTE predicate on the "w_user_id" field.
func WUserIDLTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWUserID), v))
	})
}

// WUserIDContains applies the Contains predicate on the "w_user_id" field.
func WUserIDContains(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWUserID), v))
	})
}

// WUserIDHasPrefix applies the HasPrefix predicate on the "w_user_id" field.
func WUserIDHasPrefix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWUserID), v))
	})
}

// WUserIDHasSuffix applies the HasSuffix predicate on the "w_user_id" field.
func WUserIDHasSuffix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWUserID), v))
	})
}

// WUserIDIsNil applies the IsNil predicate on the "w_user_id" field.
func WUserIDIsNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWUserID)))
	})
}

// WUserIDNotNil applies the NotNil predicate on the "w_user_id" field.
func WUserIDNotNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWUserID)))
	})
}

// WUserIDEqualFold applies the EqualFold predicate on the "w_user_id" field.
func WUserIDEqualFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWUserID), v))
	})
}

// WUserIDContainsFold applies the ContainsFold predicate on the "w_user_id" field.
func WUserIDContainsFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWUserID), v))
	})
}

// BUserIDEQ applies the EQ predicate on the "b_user_id" field.
func BUserIDEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBUserID), v))
	})
}

// BUserIDNEQ applies the NEQ predicate on the "b_user_id" field.
func BUserIDNEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBUserID), v))
	})
}

// BUserIDIn applies the In predicate on the "b_user_id" field.
func BUserIDIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBUserID), v...))
	})
}

// BUserIDNotIn applies the NotIn predicate on the "b_user_id" field.
func BUserIDNotIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBUserID), v...))
	})
}

// BUserIDGT applies the GT predicate on the "b_user_id" field.
func BUserIDGT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBUserID), v))
	})
}

// BUserIDGTE applies the GTE predicate on the "b_user_id" field.
func BUserIDGTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBUserID), v))
	})
}

// BUserIDLT applies the LT predicate on the "b_user_id" field.
func BUserIDLT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBUserID), v))
	})
}

// BUserIDLTE applies the LTE predicate on the "b_user_id" field.
func BUserIDLTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBUserID), v))
	})
}

// BUserIDContains applies the Contains predicate on the "b_user_id" field.
func BUserIDContains(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBUserID), v))
	})
}

// BUserIDHasPrefix applies the HasPrefix predicate on the "b_user_id" field.
func BUserIDHasPrefix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBUserID), v))
	})
}

// BUserIDHasSuffix applies the HasSuffix predicate on the "b_user_id" field.
func BUserIDHasSuffix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBUserID), v))
	})
}

// BUserIDIsNil applies the IsNil predicate on the "b_user_id" field.
func BUserIDIsNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBUserID)))
	})
}

// BUserIDNotNil applies the NotNil predicate on the "b_user_id" field.
func BUserIDNotNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBUserID)))
	})
}

// BUserIDEqualFold applies the EqualFold predicate on the "b_user_id" field.
func BUserIDEqualFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBUserID), v))
	})
}

// BUserIDContainsFold applies the ContainsFold predicate on the "b_user_id" field.
func BUserIDContainsFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBUserID), v))
	})
}

// NextTurnUserIDEQ applies the EQ predicate on the "next_turn_user_id" field.
func NextTurnUserIDEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDNEQ applies the NEQ predicate on the "next_turn_user_id" field.
func NextTurnUserIDNEQ(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDIn applies the In predicate on the "next_turn_user_id" field.
func NextTurnUserIDIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNextTurnUserID), v...))
	})
}

// NextTurnUserIDNotIn applies the NotIn predicate on the "next_turn_user_id" field.
func NextTurnUserIDNotIn(vs ...string) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNextTurnUserID), v...))
	})
}

// NextTurnUserIDGT applies the GT predicate on the "next_turn_user_id" field.
func NextTurnUserIDGT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDGTE applies the GTE predicate on the "next_turn_user_id" field.
func NextTurnUserIDGTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDLT applies the LT predicate on the "next_turn_user_id" field.
func NextTurnUserIDLT(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDLTE applies the LTE predicate on the "next_turn_user_id" field.
func NextTurnUserIDLTE(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDContains applies the Contains predicate on the "next_turn_user_id" field.
func NextTurnUserIDContains(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDHasPrefix applies the HasPrefix predicate on the "next_turn_user_id" field.
func NextTurnUserIDHasPrefix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDHasSuffix applies the HasSuffix predicate on the "next_turn_user_id" field.
func NextTurnUserIDHasSuffix(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDIsNil applies the IsNil predicate on the "next_turn_user_id" field.
func NextTurnUserIDIsNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextTurnUserID)))
	})
}

// NextTurnUserIDNotNil applies the NotNil predicate on the "next_turn_user_id" field.
func NextTurnUserIDNotNil() predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextTurnUserID)))
	})
}

// NextTurnUserIDEqualFold applies the EqualFold predicate on the "next_turn_user_id" field.
func NextTurnUserIDEqualFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNextTurnUserID), v))
	})
}

// NextTurnUserIDContainsFold applies the ContainsFold predicate on the "next_turn_user_id" field.
func NextTurnUserIDContainsFold(v string) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNextTurnUserID), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DRoom) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DRoom) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DRoom) predicate.DRoom {
	return predicate.DRoom(func(s *sql.Selector) {
		p(s.Not())
	})
}
