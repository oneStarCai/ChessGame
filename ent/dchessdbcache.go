// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/orestonce/ChessGame/ent/dchessdbcache"
)

// DChessdbCache is the model entity for the DChessdbCache schema.
type DChessdbCache struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Board holds the value of the "board" field.
	Board string `json:"board,omitempty"`
	// Resp holds the value of the "resp" field.
	Resp []byte `json:"resp,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DChessdbCache) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dchessdbcache.FieldResp:
			values[i] = new([]byte)
		case dchessdbcache.FieldID, dchessdbcache.FieldBoard:
			values[i] = new(sql.NullString)
		case dchessdbcache.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DChessdbCache", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DChessdbCache fields.
func (dc *DChessdbCache) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dchessdbcache.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dc.ID = value.String
			}
		case dchessdbcache.FieldBoard:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field board", values[i])
			} else if value.Valid {
				dc.Board = value.String
			}
		case dchessdbcache.FieldResp:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field resp", values[i])
			} else if value != nil {
				dc.Resp = *value
			}
		case dchessdbcache.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dc.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DChessdbCache.
// Note that you need to call DChessdbCache.Unwrap() before calling this method if this DChessdbCache
// was returned from a transaction, and the transaction was committed or rolled back.
func (dc *DChessdbCache) Update() *DChessdbCacheUpdateOne {
	return (&DChessdbCacheClient{config: dc.config}).UpdateOne(dc)
}

// Unwrap unwraps the DChessdbCache entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dc *DChessdbCache) Unwrap() *DChessdbCache {
	tx, ok := dc.config.driver.(*txDriver)
	if !ok {
		panic("ent: DChessdbCache is not a transactional entity")
	}
	dc.config.driver = tx.drv
	return dc
}

// String implements the fmt.Stringer.
func (dc *DChessdbCache) String() string {
	var builder strings.Builder
	builder.WriteString("DChessdbCache(")
	builder.WriteString(fmt.Sprintf("id=%v", dc.ID))
	builder.WriteString(", board=")
	builder.WriteString(dc.Board)
	builder.WriteString(", resp=")
	builder.WriteString(fmt.Sprintf("%v", dc.Resp))
	builder.WriteString(", create_time=")
	builder.WriteString(dc.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DChessdbCaches is a parsable slice of DChessdbCache.
type DChessdbCaches []*DChessdbCache

func (dc DChessdbCaches) config(cfg config) {
	for _i := range dc {
		dc[_i].config = cfg
	}
}
