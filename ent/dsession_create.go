// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/orestonce/ChessGame/ent/dsession"
)

// DSessionCreate is the builder for creating a DSession entity.
type DSessionCreate struct {
	config
	mutation *DSessionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (dc *DSessionCreate) SetUserID(s string) *DSessionCreate {
	dc.mutation.SetUserID(s)
	return dc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dc *DSessionCreate) SetNillableUserID(s *string) *DSessionCreate {
	if s != nil {
		dc.SetUserID(*s)
	}
	return dc
}

// SetRoomID sets the "room_id" field.
func (dc *DSessionCreate) SetRoomID(s string) *DSessionCreate {
	dc.mutation.SetRoomID(s)
	return dc
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (dc *DSessionCreate) SetNillableRoomID(s *string) *DSessionCreate {
	if s != nil {
		dc.SetRoomID(*s)
	}
	return dc
}

// SetCreateTime sets the "create_time" field.
func (dc *DSessionCreate) SetCreateTime(t time.Time) *DSessionCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetID sets the "id" field.
func (dc *DSessionCreate) SetID(s string) *DSessionCreate {
	dc.mutation.SetID(s)
	return dc
}

// Mutation returns the DSessionMutation object of the builder.
func (dc *DSessionCreate) Mutation() *DSessionMutation {
	return dc.mutation
}

// Save creates the DSession in the database.
func (dc *DSessionCreate) Save(ctx context.Context) (*DSession, error) {
	var (
		err  error
		node *DSession
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DSessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DSessionCreate) SaveX(ctx context.Context) *DSession {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DSessionCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DSessionCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DSessionCreate) defaults() {
	if _, ok := dc.mutation.UserID(); !ok {
		v := dsession.DefaultUserID
		dc.mutation.SetUserID(v)
	}
	if _, ok := dc.mutation.RoomID(); !ok {
		v := dsession.DefaultRoomID
		dc.mutation.SetRoomID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DSessionCreate) check() error {
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := dc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room_id", err: errors.New(`ent: missing required field "room_id"`)}
	}
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	return nil
}

func (dc *DSessionCreate) sqlSave(ctx context.Context) (*DSession, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

func (dc *DSessionCreate) createSpec() (*DSession, *sqlgraph.CreateSpec) {
	var (
		_node = &DSession{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dsession.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dsession.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dsession.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := dc.mutation.RoomID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dsession.FieldRoomID,
		})
		_node.RoomID = value
	}
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dsession.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	return _node, _spec
}

// DSessionCreateBulk is the builder for creating many DSession entities in bulk.
type DSessionCreateBulk struct {
	config
	builders []*DSessionCreate
}

// Save creates the DSession entities in the database.
func (dcb *DSessionCreateBulk) Save(ctx context.Context) ([]*DSession, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*DSession, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DSessionCreateBulk) SaveX(ctx context.Context) []*DSession {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DSessionCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
