// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/orestonce/ChessGame/ent/droom"
	"github.com/orestonce/ChessGame/ent/predicate"
)

// DRoomUpdate is the builder for updating DRoom entities.
type DRoomUpdate struct {
	config
	hooks    []Hook
	mutation *DRoomMutation
}

// Where appends a list predicates to the DRoomUpdate builder.
func (du *DRoomUpdate) Where(ps ...predicate.DRoom) *DRoomUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetIsGameRunning sets the "is_game_running" field.
func (du *DRoomUpdate) SetIsGameRunning(b bool) *DRoomUpdate {
	du.mutation.SetIsGameRunning(b)
	return du
}

// SetNillableIsGameRunning sets the "is_game_running" field if the given value is not nil.
func (du *DRoomUpdate) SetNillableIsGameRunning(b *bool) *DRoomUpdate {
	if b != nil {
		du.SetIsGameRunning(*b)
	}
	return du
}

// ClearIsGameRunning clears the value of the "is_game_running" field.
func (du *DRoomUpdate) ClearIsGameRunning() *DRoomUpdate {
	du.mutation.ClearIsGameRunning()
	return du
}

// SetPanel sets the "panel" field.
func (du *DRoomUpdate) SetPanel(s string) *DRoomUpdate {
	du.mutation.SetPanel(s)
	return du
}

// SetNillablePanel sets the "panel" field if the given value is not nil.
func (du *DRoomUpdate) SetNillablePanel(s *string) *DRoomUpdate {
	if s != nil {
		du.SetPanel(*s)
	}
	return du
}

// ClearPanel clears the value of the "panel" field.
func (du *DRoomUpdate) ClearPanel() *DRoomUpdate {
	du.mutation.ClearPanel()
	return du
}

// SetUpUserID sets the "up_user_id" field.
func (du *DRoomUpdate) SetUpUserID(s string) *DRoomUpdate {
	du.mutation.SetUpUserID(s)
	return du
}

// SetNillableUpUserID sets the "up_user_id" field if the given value is not nil.
func (du *DRoomUpdate) SetNillableUpUserID(s *string) *DRoomUpdate {
	if s != nil {
		du.SetUpUserID(*s)
	}
	return du
}

// ClearUpUserID clears the value of the "up_user_id" field.
func (du *DRoomUpdate) ClearUpUserID() *DRoomUpdate {
	du.mutation.ClearUpUserID()
	return du
}

// SetDownUserID sets the "down_user_id" field.
func (du *DRoomUpdate) SetDownUserID(s string) *DRoomUpdate {
	du.mutation.SetDownUserID(s)
	return du
}

// SetNillableDownUserID sets the "down_user_id" field if the given value is not nil.
func (du *DRoomUpdate) SetNillableDownUserID(s *string) *DRoomUpdate {
	if s != nil {
		du.SetDownUserID(*s)
	}
	return du
}

// ClearDownUserID clears the value of the "down_user_id" field.
func (du *DRoomUpdate) ClearDownUserID() *DRoomUpdate {
	du.mutation.ClearDownUserID()
	return du
}

// SetCreateTime sets the "create_time" field.
func (du *DRoomUpdate) SetCreateTime(t time.Time) *DRoomUpdate {
	du.mutation.SetCreateTime(t)
	return du
}

// Mutation returns the DRoomMutation object of the builder.
func (du *DRoomUpdate) Mutation() *DRoomMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DRoomUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DRoomUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DRoomUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   droom.Table,
			Columns: droom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: droom.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.IsGameRunning(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: droom.FieldIsGameRunning,
		})
	}
	if du.mutation.IsGameRunningCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: droom.FieldIsGameRunning,
		})
	}
	if value, ok := du.mutation.Panel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: droom.FieldPanel,
		})
	}
	if du.mutation.PanelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: droom.FieldPanel,
		})
	}
	if value, ok := du.mutation.UpUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: droom.FieldUpUserID,
		})
	}
	if du.mutation.UpUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: droom.FieldUpUserID,
		})
	}
	if value, ok := du.mutation.DownUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: droom.FieldDownUserID,
		})
	}
	if du.mutation.DownUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: droom.FieldDownUserID,
		})
	}
	if value, ok := du.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: droom.FieldCreateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{droom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DRoomUpdateOne is the builder for updating a single DRoom entity.
type DRoomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DRoomMutation
}

// SetIsGameRunning sets the "is_game_running" field.
func (duo *DRoomUpdateOne) SetIsGameRunning(b bool) *DRoomUpdateOne {
	duo.mutation.SetIsGameRunning(b)
	return duo
}

// SetNillableIsGameRunning sets the "is_game_running" field if the given value is not nil.
func (duo *DRoomUpdateOne) SetNillableIsGameRunning(b *bool) *DRoomUpdateOne {
	if b != nil {
		duo.SetIsGameRunning(*b)
	}
	return duo
}

// ClearIsGameRunning clears the value of the "is_game_running" field.
func (duo *DRoomUpdateOne) ClearIsGameRunning() *DRoomUpdateOne {
	duo.mutation.ClearIsGameRunning()
	return duo
}

// SetPanel sets the "panel" field.
func (duo *DRoomUpdateOne) SetPanel(s string) *DRoomUpdateOne {
	duo.mutation.SetPanel(s)
	return duo
}

// SetNillablePanel sets the "panel" field if the given value is not nil.
func (duo *DRoomUpdateOne) SetNillablePanel(s *string) *DRoomUpdateOne {
	if s != nil {
		duo.SetPanel(*s)
	}
	return duo
}

// ClearPanel clears the value of the "panel" field.
func (duo *DRoomUpdateOne) ClearPanel() *DRoomUpdateOne {
	duo.mutation.ClearPanel()
	return duo
}

// SetUpUserID sets the "up_user_id" field.
func (duo *DRoomUpdateOne) SetUpUserID(s string) *DRoomUpdateOne {
	duo.mutation.SetUpUserID(s)
	return duo
}

// SetNillableUpUserID sets the "up_user_id" field if the given value is not nil.
func (duo *DRoomUpdateOne) SetNillableUpUserID(s *string) *DRoomUpdateOne {
	if s != nil {
		duo.SetUpUserID(*s)
	}
	return duo
}

// ClearUpUserID clears the value of the "up_user_id" field.
func (duo *DRoomUpdateOne) ClearUpUserID() *DRoomUpdateOne {
	duo.mutation.ClearUpUserID()
	return duo
}

// SetDownUserID sets the "down_user_id" field.
func (duo *DRoomUpdateOne) SetDownUserID(s string) *DRoomUpdateOne {
	duo.mutation.SetDownUserID(s)
	return duo
}

// SetNillableDownUserID sets the "down_user_id" field if the given value is not nil.
func (duo *DRoomUpdateOne) SetNillableDownUserID(s *string) *DRoomUpdateOne {
	if s != nil {
		duo.SetDownUserID(*s)
	}
	return duo
}

// ClearDownUserID clears the value of the "down_user_id" field.
func (duo *DRoomUpdateOne) ClearDownUserID() *DRoomUpdateOne {
	duo.mutation.ClearDownUserID()
	return duo
}

// SetCreateTime sets the "create_time" field.
func (duo *DRoomUpdateOne) SetCreateTime(t time.Time) *DRoomUpdateOne {
	duo.mutation.SetCreateTime(t)
	return duo
}

// Mutation returns the DRoomMutation object of the builder.
func (duo *DRoomUpdateOne) Mutation() *DRoomMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DRoomUpdateOne) Select(field string, fields ...string) *DRoomUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated DRoom entity.
func (duo *DRoomUpdateOne) Save(ctx context.Context) (*DRoom, error) {
	var (
		err  error
		node *DRoom
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DRoomUpdateOne) SaveX(ctx context.Context) *DRoom {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DRoomUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DRoomUpdateOne) sqlSave(ctx context.Context) (_node *DRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   droom.Table,
			Columns: droom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: droom.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DRoom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, droom.FieldID)
		for _, f := range fields {
			if !droom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != droom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.IsGameRunning(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: droom.FieldIsGameRunning,
		})
	}
	if duo.mutation.IsGameRunningCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: droom.FieldIsGameRunning,
		})
	}
	if value, ok := duo.mutation.Panel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: droom.FieldPanel,
		})
	}
	if duo.mutation.PanelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: droom.FieldPanel,
		})
	}
	if value, ok := duo.mutation.UpUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: droom.FieldUpUserID,
		})
	}
	if duo.mutation.UpUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: droom.FieldUpUserID,
		})
	}
	if value, ok := duo.mutation.DownUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: droom.FieldDownUserID,
		})
	}
	if duo.mutation.DownUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: droom.FieldDownUserID,
		})
	}
	if value, ok := duo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: droom.FieldCreateTime,
		})
	}
	_node = &DRoom{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{droom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
