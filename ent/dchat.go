// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/orestonce/ChessGame/ent/dchat"
)

// DChat is the model entity for the DChat schema.
type DChat struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID string `json:"session_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// RoomID holds the value of the "room_id" field.
	RoomID string `json:"room_id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DChat) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dchat.FieldID, dchat.FieldSessionID, dchat.FieldUserID, dchat.FieldRoomID, dchat.FieldText:
			values[i] = new(sql.NullString)
		case dchat.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DChat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DChat fields.
func (d *DChat) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dchat.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case dchat.FieldSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				d.SessionID = value.String
			}
		case dchat.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				d.UserID = value.String
			}
		case dchat.FieldRoomID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value.Valid {
				d.RoomID = value.String
			}
		case dchat.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				d.Text = value.String
			}
		case dchat.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DChat.
// Note that you need to call DChat.Unwrap() before calling this method if this DChat
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *DChat) Update() *DChatUpdateOne {
	return (&DChatClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the DChat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *DChat) Unwrap() *DChat {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: DChat is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *DChat) String() string {
	var builder strings.Builder
	builder.WriteString("DChat(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", session_id=")
	builder.WriteString(d.SessionID)
	builder.WriteString(", user_id=")
	builder.WriteString(d.UserID)
	builder.WriteString(", room_id=")
	builder.WriteString(d.RoomID)
	builder.WriteString(", text=")
	builder.WriteString(d.Text)
	builder.WriteString(", create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DChats is a parsable slice of DChat.
type DChats []*DChat

func (d DChats) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
