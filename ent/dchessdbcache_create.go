// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/orestonce/ChessGame/ent/dchessdbcache"
)

// DChessdbCacheCreate is the builder for creating a DChessdbCache entity.
type DChessdbCacheCreate struct {
	config
	mutation *DChessdbCacheMutation
	hooks    []Hook
}

// SetBoard sets the "board" field.
func (dcc *DChessdbCacheCreate) SetBoard(s string) *DChessdbCacheCreate {
	dcc.mutation.SetBoard(s)
	return dcc
}

// SetResp sets the "resp" field.
func (dcc *DChessdbCacheCreate) SetResp(b []byte) *DChessdbCacheCreate {
	dcc.mutation.SetResp(b)
	return dcc
}

// SetCreateTime sets the "create_time" field.
func (dcc *DChessdbCacheCreate) SetCreateTime(t time.Time) *DChessdbCacheCreate {
	dcc.mutation.SetCreateTime(t)
	return dcc
}

// SetID sets the "id" field.
func (dcc *DChessdbCacheCreate) SetID(s string) *DChessdbCacheCreate {
	dcc.mutation.SetID(s)
	return dcc
}

// Mutation returns the DChessdbCacheMutation object of the builder.
func (dcc *DChessdbCacheCreate) Mutation() *DChessdbCacheMutation {
	return dcc.mutation
}

// Save creates the DChessdbCache in the database.
func (dcc *DChessdbCacheCreate) Save(ctx context.Context) (*DChessdbCache, error) {
	var (
		err  error
		node *DChessdbCache
	)
	if len(dcc.hooks) == 0 {
		if err = dcc.check(); err != nil {
			return nil, err
		}
		node, err = dcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DChessdbCacheMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dcc.check(); err != nil {
				return nil, err
			}
			dcc.mutation = mutation
			if node, err = dcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dcc.hooks) - 1; i >= 0; i-- {
			if dcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dcc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dcc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dcc *DChessdbCacheCreate) SaveX(ctx context.Context) *DChessdbCache {
	v, err := dcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcc *DChessdbCacheCreate) Exec(ctx context.Context) error {
	_, err := dcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcc *DChessdbCacheCreate) ExecX(ctx context.Context) {
	if err := dcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dcc *DChessdbCacheCreate) check() error {
	if _, ok := dcc.mutation.Board(); !ok {
		return &ValidationError{Name: "board", err: errors.New(`ent: missing required field "board"`)}
	}
	if _, ok := dcc.mutation.Resp(); !ok {
		return &ValidationError{Name: "resp", err: errors.New(`ent: missing required field "resp"`)}
	}
	if _, ok := dcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	return nil
}

func (dcc *DChessdbCacheCreate) sqlSave(ctx context.Context) (*DChessdbCache, error) {
	_node, _spec := dcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

func (dcc *DChessdbCacheCreate) createSpec() (*DChessdbCache, *sqlgraph.CreateSpec) {
	var (
		_node = &DChessdbCache{config: dcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dchessdbcache.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dchessdbcache.FieldID,
			},
		}
	)
	if id, ok := dcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dcc.mutation.Board(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dchessdbcache.FieldBoard,
		})
		_node.Board = value
	}
	if value, ok := dcc.mutation.Resp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: dchessdbcache.FieldResp,
		})
		_node.Resp = value
	}
	if value, ok := dcc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dchessdbcache.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	return _node, _spec
}

// DChessdbCacheCreateBulk is the builder for creating many DChessdbCache entities in bulk.
type DChessdbCacheCreateBulk struct {
	config
	builders []*DChessdbCacheCreate
}

// Save creates the DChessdbCache entities in the database.
func (dccb *DChessdbCacheCreateBulk) Save(ctx context.Context) ([]*DChessdbCache, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dccb.builders))
	nodes := make([]*DChessdbCache, len(dccb.builders))
	mutators := make([]Mutator, len(dccb.builders))
	for i := range dccb.builders {
		func(i int, root context.Context) {
			builder := dccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DChessdbCacheMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dccb *DChessdbCacheCreateBulk) SaveX(ctx context.Context) []*DChessdbCache {
	v, err := dccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dccb *DChessdbCacheCreateBulk) Exec(ctx context.Context) error {
	_, err := dccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dccb *DChessdbCacheCreateBulk) ExecX(ctx context.Context) {
	if err := dccb.Exec(ctx); err != nil {
		panic(err)
	}
}
