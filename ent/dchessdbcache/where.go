// Code generated by entc, DO NOT EDIT.

package dchessdbcache

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/orestonce/ChessGame/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Board applies equality check predicate on the "board" field. It's identical to BoardEQ.
func Board(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoard), v))
	})
}

// Resp applies equality check predicate on the "resp" field. It's identical to RespEQ.
func Resp(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResp), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// BoardEQ applies the EQ predicate on the "board" field.
func BoardEQ(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoard), v))
	})
}

// BoardNEQ applies the NEQ predicate on the "board" field.
func BoardNEQ(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBoard), v))
	})
}

// BoardIn applies the In predicate on the "board" field.
func BoardIn(vs ...string) predicate.DChessdbCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBoard), v...))
	})
}

// BoardNotIn applies the NotIn predicate on the "board" field.
func BoardNotIn(vs ...string) predicate.DChessdbCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBoard), v...))
	})
}

// BoardGT applies the GT predicate on the "board" field.
func BoardGT(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBoard), v))
	})
}

// BoardGTE applies the GTE predicate on the "board" field.
func BoardGTE(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBoard), v))
	})
}

// BoardLT applies the LT predicate on the "board" field.
func BoardLT(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBoard), v))
	})
}

// BoardLTE applies the LTE predicate on the "board" field.
func BoardLTE(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBoard), v))
	})
}

// BoardContains applies the Contains predicate on the "board" field.
func BoardContains(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBoard), v))
	})
}

// BoardHasPrefix applies the HasPrefix predicate on the "board" field.
func BoardHasPrefix(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBoard), v))
	})
}

// BoardHasSuffix applies the HasSuffix predicate on the "board" field.
func BoardHasSuffix(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBoard), v))
	})
}

// BoardEqualFold applies the EqualFold predicate on the "board" field.
func BoardEqualFold(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBoard), v))
	})
}

// BoardContainsFold applies the ContainsFold predicate on the "board" field.
func BoardContainsFold(v string) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBoard), v))
	})
}

// RespEQ applies the EQ predicate on the "resp" field.
func RespEQ(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResp), v))
	})
}

// RespNEQ applies the NEQ predicate on the "resp" field.
func RespNEQ(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResp), v))
	})
}

// RespIn applies the In predicate on the "resp" field.
func RespIn(vs ...[]byte) predicate.DChessdbCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResp), v...))
	})
}

// RespNotIn applies the NotIn predicate on the "resp" field.
func RespNotIn(vs ...[]byte) predicate.DChessdbCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResp), v...))
	})
}

// RespGT applies the GT predicate on the "resp" field.
func RespGT(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResp), v))
	})
}

// RespGTE applies the GTE predicate on the "resp" field.
func RespGTE(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResp), v))
	})
}

// RespLT applies the LT predicate on the "resp" field.
func RespLT(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResp), v))
	})
}

// RespLTE applies the LTE predicate on the "resp" field.
func RespLTE(v []byte) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResp), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DChessdbCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DChessdbCache {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DChessdbCache(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DChessdbCache) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DChessdbCache) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DChessdbCache) predicate.DChessdbCache {
	return predicate.DChessdbCache(func(s *sql.Selector) {
		p(s.Not())
	})
}
