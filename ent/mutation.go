// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/orestonce/ChessGame/ent/dchat"
	"github.com/orestonce/ChessGame/ent/droom"
	"github.com/orestonce/ChessGame/ent/dsession"
	"github.com/orestonce/ChessGame/ent/duser"
	"github.com/orestonce/ChessGame/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDChat    = "DChat"
	TypeDRoom    = "DRoom"
	TypeDSession = "DSession"
	TypeDUser    = "DUser"
)

// DChatMutation represents an operation that mutates the DChat nodes in the graph.
type DChatMutation struct {
	config
	op            Op
	typ           string
	id            *string
	session_id    *string
	user_id       *string
	room_id       *string
	text          *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DChat, error)
	predicates    []predicate.DChat
}

var _ ent.Mutation = (*DChatMutation)(nil)

// dchatOption allows management of the mutation configuration using functional options.
type dchatOption func(*DChatMutation)

// newDChatMutation creates new mutation for the DChat entity.
func newDChatMutation(c config, op Op, opts ...dchatOption) *DChatMutation {
	m := &DChatMutation{
		config:        c,
		op:            op,
		typ:           TypeDChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDChatID sets the ID field of the mutation.
func withDChatID(id string) dchatOption {
	return func(m *DChatMutation) {
		var (
			err   error
			once  sync.Once
			value *DChat
		)
		m.oldValue = func(ctx context.Context) (*DChat, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DChat.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDChat sets the old DChat of the mutation.
func withDChat(node *DChat) dchatOption {
	return func(m *DChatMutation) {
		m.oldValue = func(context.Context) (*DChat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DChat entities.
func (m *DChatMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DChatMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSessionID sets the "session_id" field.
func (m *DChatMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *DChatMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the DChat entity.
// If the DChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DChatMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *DChatMutation) ResetSessionID() {
	m.session_id = nil
}

// SetUserID sets the "user_id" field.
func (m *DChatMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DChatMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the DChat entity.
// If the DChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DChatMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DChatMutation) ResetUserID() {
	m.user_id = nil
}

// SetRoomID sets the "room_id" field.
func (m *DChatMutation) SetRoomID(s string) {
	m.room_id = &s
}

// RoomID returns the value of the "room_id" field in the mutation.
func (m *DChatMutation) RoomID() (r string, exists bool) {
	v := m.room_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomID returns the old "room_id" field's value of the DChat entity.
// If the DChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DChatMutation) OldRoomID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomID: %w", err)
	}
	return oldValue.RoomID, nil
}

// ResetRoomID resets all changes to the "room_id" field.
func (m *DChatMutation) ResetRoomID() {
	m.room_id = nil
}

// SetText sets the "text" field.
func (m *DChatMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *DChatMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the DChat entity.
// If the DChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DChatMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *DChatMutation) ResetText() {
	m.text = nil
}

// SetCreateTime sets the "create_time" field.
func (m *DChatMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DChatMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DChat entity.
// If the DChat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DChatMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DChatMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the DChatMutation builder.
func (m *DChatMutation) Where(ps ...predicate.DChat) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DChatMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DChat).
func (m *DChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DChatMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.session_id != nil {
		fields = append(fields, dchat.FieldSessionID)
	}
	if m.user_id != nil {
		fields = append(fields, dchat.FieldUserID)
	}
	if m.room_id != nil {
		fields = append(fields, dchat.FieldRoomID)
	}
	if m.text != nil {
		fields = append(fields, dchat.FieldText)
	}
	if m.create_time != nil {
		fields = append(fields, dchat.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dchat.FieldSessionID:
		return m.SessionID()
	case dchat.FieldUserID:
		return m.UserID()
	case dchat.FieldRoomID:
		return m.RoomID()
	case dchat.FieldText:
		return m.Text()
	case dchat.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dchat.FieldSessionID:
		return m.OldSessionID(ctx)
	case dchat.FieldUserID:
		return m.OldUserID(ctx)
	case dchat.FieldRoomID:
		return m.OldRoomID(ctx)
	case dchat.FieldText:
		return m.OldText(ctx)
	case dchat.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown DChat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dchat.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case dchat.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case dchat.FieldRoomID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomID(v)
		return nil
	case dchat.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	case dchat.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown DChat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DChatMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DChatMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DChat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DChat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DChatMutation) ResetField(name string) error {
	switch name {
	case dchat.FieldSessionID:
		m.ResetSessionID()
		return nil
	case dchat.FieldUserID:
		m.ResetUserID()
		return nil
	case dchat.FieldRoomID:
		m.ResetRoomID()
		return nil
	case dchat.FieldText:
		m.ResetText()
		return nil
	case dchat.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown DChat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DChatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DChatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DChatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DChatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DChat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DChatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DChat edge %s", name)
}

// DRoomMutation represents an operation that mutates the DRoom nodes in the graph.
type DRoomMutation struct {
	config
	op              Op
	typ             string
	id              *string
	is_game_running *bool
	panel           *string
	w_user_id       *string
	b_user_id       *string
	create_time     *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*DRoom, error)
	predicates      []predicate.DRoom
}

var _ ent.Mutation = (*DRoomMutation)(nil)

// droomOption allows management of the mutation configuration using functional options.
type droomOption func(*DRoomMutation)

// newDRoomMutation creates new mutation for the DRoom entity.
func newDRoomMutation(c config, op Op, opts ...droomOption) *DRoomMutation {
	m := &DRoomMutation{
		config:        c,
		op:            op,
		typ:           TypeDRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDRoomID sets the ID field of the mutation.
func withDRoomID(id string) droomOption {
	return func(m *DRoomMutation) {
		var (
			err   error
			once  sync.Once
			value *DRoom
		)
		m.oldValue = func(ctx context.Context) (*DRoom, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DRoom.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDRoom sets the old DRoom of the mutation.
func withDRoom(node *DRoom) droomOption {
	return func(m *DRoomMutation) {
		m.oldValue = func(context.Context) (*DRoom, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DRoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DRoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DRoom entities.
func (m *DRoomMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DRoomMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIsGameRunning sets the "is_game_running" field.
func (m *DRoomMutation) SetIsGameRunning(b bool) {
	m.is_game_running = &b
}

// IsGameRunning returns the value of the "is_game_running" field in the mutation.
func (m *DRoomMutation) IsGameRunning() (r bool, exists bool) {
	v := m.is_game_running
	if v == nil {
		return
	}
	return *v, true
}

// OldIsGameRunning returns the old "is_game_running" field's value of the DRoom entity.
// If the DRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DRoomMutation) OldIsGameRunning(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsGameRunning is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsGameRunning requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsGameRunning: %w", err)
	}
	return oldValue.IsGameRunning, nil
}

// ClearIsGameRunning clears the value of the "is_game_running" field.
func (m *DRoomMutation) ClearIsGameRunning() {
	m.is_game_running = nil
	m.clearedFields[droom.FieldIsGameRunning] = struct{}{}
}

// IsGameRunningCleared returns if the "is_game_running" field was cleared in this mutation.
func (m *DRoomMutation) IsGameRunningCleared() bool {
	_, ok := m.clearedFields[droom.FieldIsGameRunning]
	return ok
}

// ResetIsGameRunning resets all changes to the "is_game_running" field.
func (m *DRoomMutation) ResetIsGameRunning() {
	m.is_game_running = nil
	delete(m.clearedFields, droom.FieldIsGameRunning)
}

// SetPanel sets the "panel" field.
func (m *DRoomMutation) SetPanel(s string) {
	m.panel = &s
}

// Panel returns the value of the "panel" field in the mutation.
func (m *DRoomMutation) Panel() (r string, exists bool) {
	v := m.panel
	if v == nil {
		return
	}
	return *v, true
}

// OldPanel returns the old "panel" field's value of the DRoom entity.
// If the DRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DRoomMutation) OldPanel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPanel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPanel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPanel: %w", err)
	}
	return oldValue.Panel, nil
}

// ClearPanel clears the value of the "panel" field.
func (m *DRoomMutation) ClearPanel() {
	m.panel = nil
	m.clearedFields[droom.FieldPanel] = struct{}{}
}

// PanelCleared returns if the "panel" field was cleared in this mutation.
func (m *DRoomMutation) PanelCleared() bool {
	_, ok := m.clearedFields[droom.FieldPanel]
	return ok
}

// ResetPanel resets all changes to the "panel" field.
func (m *DRoomMutation) ResetPanel() {
	m.panel = nil
	delete(m.clearedFields, droom.FieldPanel)
}

// SetWUserID sets the "w_user_id" field.
func (m *DRoomMutation) SetWUserID(s string) {
	m.w_user_id = &s
}

// WUserID returns the value of the "w_user_id" field in the mutation.
func (m *DRoomMutation) WUserID() (r string, exists bool) {
	v := m.w_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWUserID returns the old "w_user_id" field's value of the DRoom entity.
// If the DRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DRoomMutation) OldWUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWUserID: %w", err)
	}
	return oldValue.WUserID, nil
}

// ClearWUserID clears the value of the "w_user_id" field.
func (m *DRoomMutation) ClearWUserID() {
	m.w_user_id = nil
	m.clearedFields[droom.FieldWUserID] = struct{}{}
}

// WUserIDCleared returns if the "w_user_id" field was cleared in this mutation.
func (m *DRoomMutation) WUserIDCleared() bool {
	_, ok := m.clearedFields[droom.FieldWUserID]
	return ok
}

// ResetWUserID resets all changes to the "w_user_id" field.
func (m *DRoomMutation) ResetWUserID() {
	m.w_user_id = nil
	delete(m.clearedFields, droom.FieldWUserID)
}

// SetBUserID sets the "b_user_id" field.
func (m *DRoomMutation) SetBUserID(s string) {
	m.b_user_id = &s
}

// BUserID returns the value of the "b_user_id" field in the mutation.
func (m *DRoomMutation) BUserID() (r string, exists bool) {
	v := m.b_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBUserID returns the old "b_user_id" field's value of the DRoom entity.
// If the DRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DRoomMutation) OldBUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBUserID: %w", err)
	}
	return oldValue.BUserID, nil
}

// ClearBUserID clears the value of the "b_user_id" field.
func (m *DRoomMutation) ClearBUserID() {
	m.b_user_id = nil
	m.clearedFields[droom.FieldBUserID] = struct{}{}
}

// BUserIDCleared returns if the "b_user_id" field was cleared in this mutation.
func (m *DRoomMutation) BUserIDCleared() bool {
	_, ok := m.clearedFields[droom.FieldBUserID]
	return ok
}

// ResetBUserID resets all changes to the "b_user_id" field.
func (m *DRoomMutation) ResetBUserID() {
	m.b_user_id = nil
	delete(m.clearedFields, droom.FieldBUserID)
}

// SetCreateTime sets the "create_time" field.
func (m *DRoomMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DRoomMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DRoom entity.
// If the DRoom object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DRoomMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DRoomMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the DRoomMutation builder.
func (m *DRoomMutation) Where(ps ...predicate.DRoom) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DRoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DRoom).
func (m *DRoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DRoomMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.is_game_running != nil {
		fields = append(fields, droom.FieldIsGameRunning)
	}
	if m.panel != nil {
		fields = append(fields, droom.FieldPanel)
	}
	if m.w_user_id != nil {
		fields = append(fields, droom.FieldWUserID)
	}
	if m.b_user_id != nil {
		fields = append(fields, droom.FieldBUserID)
	}
	if m.create_time != nil {
		fields = append(fields, droom.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DRoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case droom.FieldIsGameRunning:
		return m.IsGameRunning()
	case droom.FieldPanel:
		return m.Panel()
	case droom.FieldWUserID:
		return m.WUserID()
	case droom.FieldBUserID:
		return m.BUserID()
	case droom.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DRoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case droom.FieldIsGameRunning:
		return m.OldIsGameRunning(ctx)
	case droom.FieldPanel:
		return m.OldPanel(ctx)
	case droom.FieldWUserID:
		return m.OldWUserID(ctx)
	case droom.FieldBUserID:
		return m.OldBUserID(ctx)
	case droom.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown DRoom field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DRoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case droom.FieldIsGameRunning:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsGameRunning(v)
		return nil
	case droom.FieldPanel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPanel(v)
		return nil
	case droom.FieldWUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWUserID(v)
		return nil
	case droom.FieldBUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBUserID(v)
		return nil
	case droom.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown DRoom field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DRoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DRoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DRoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DRoom numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DRoomMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(droom.FieldIsGameRunning) {
		fields = append(fields, droom.FieldIsGameRunning)
	}
	if m.FieldCleared(droom.FieldPanel) {
		fields = append(fields, droom.FieldPanel)
	}
	if m.FieldCleared(droom.FieldWUserID) {
		fields = append(fields, droom.FieldWUserID)
	}
	if m.FieldCleared(droom.FieldBUserID) {
		fields = append(fields, droom.FieldBUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DRoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DRoomMutation) ClearField(name string) error {
	switch name {
	case droom.FieldIsGameRunning:
		m.ClearIsGameRunning()
		return nil
	case droom.FieldPanel:
		m.ClearPanel()
		return nil
	case droom.FieldWUserID:
		m.ClearWUserID()
		return nil
	case droom.FieldBUserID:
		m.ClearBUserID()
		return nil
	}
	return fmt.Errorf("unknown DRoom nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DRoomMutation) ResetField(name string) error {
	switch name {
	case droom.FieldIsGameRunning:
		m.ResetIsGameRunning()
		return nil
	case droom.FieldPanel:
		m.ResetPanel()
		return nil
	case droom.FieldWUserID:
		m.ResetWUserID()
		return nil
	case droom.FieldBUserID:
		m.ResetBUserID()
		return nil
	case droom.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown DRoom field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DRoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DRoomMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DRoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DRoomMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DRoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DRoomMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DRoomMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DRoom unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DRoomMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DRoom edge %s", name)
}

// DSessionMutation represents an operation that mutates the DSession nodes in the graph.
type DSessionMutation struct {
	config
	op            Op
	typ           string
	id            *string
	user_id       *string
	room_id       *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DSession, error)
	predicates    []predicate.DSession
}

var _ ent.Mutation = (*DSessionMutation)(nil)

// dsessionOption allows management of the mutation configuration using functional options.
type dsessionOption func(*DSessionMutation)

// newDSessionMutation creates new mutation for the DSession entity.
func newDSessionMutation(c config, op Op, opts ...dsessionOption) *DSessionMutation {
	m := &DSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeDSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDSessionID sets the ID field of the mutation.
func withDSessionID(id string) dsessionOption {
	return func(m *DSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *DSession
		)
		m.oldValue = func(ctx context.Context) (*DSession, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDSession sets the old DSession of the mutation.
func withDSession(node *DSession) dsessionOption {
	return func(m *DSessionMutation) {
		m.oldValue = func(context.Context) (*DSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DSession entities.
func (m *DSessionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DSessionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserID sets the "user_id" field.
func (m *DSessionMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DSessionMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the DSession entity.
// If the DSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DSessionMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DSessionMutation) ResetUserID() {
	m.user_id = nil
}

// SetRoomID sets the "room_id" field.
func (m *DSessionMutation) SetRoomID(s string) {
	m.room_id = &s
}

// RoomID returns the value of the "room_id" field in the mutation.
func (m *DSessionMutation) RoomID() (r string, exists bool) {
	v := m.room_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomID returns the old "room_id" field's value of the DSession entity.
// If the DSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DSessionMutation) OldRoomID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomID: %w", err)
	}
	return oldValue.RoomID, nil
}

// ResetRoomID resets all changes to the "room_id" field.
func (m *DSessionMutation) ResetRoomID() {
	m.room_id = nil
}

// SetCreateTime sets the "create_time" field.
func (m *DSessionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DSessionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DSession entity.
// If the DSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DSessionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DSessionMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the DSessionMutation builder.
func (m *DSessionMutation) Where(ps ...predicate.DSession) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DSessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DSession).
func (m *DSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DSessionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.user_id != nil {
		fields = append(fields, dsession.FieldUserID)
	}
	if m.room_id != nil {
		fields = append(fields, dsession.FieldRoomID)
	}
	if m.create_time != nil {
		fields = append(fields, dsession.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dsession.FieldUserID:
		return m.UserID()
	case dsession.FieldRoomID:
		return m.RoomID()
	case dsession.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dsession.FieldUserID:
		return m.OldUserID(ctx)
	case dsession.FieldRoomID:
		return m.OldRoomID(ctx)
	case dsession.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown DSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dsession.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case dsession.FieldRoomID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomID(v)
		return nil
	case dsession.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown DSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DSessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DSessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DSessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DSessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DSessionMutation) ResetField(name string) error {
	switch name {
	case dsession.FieldUserID:
		m.ResetUserID()
		return nil
	case dsession.FieldRoomID:
		m.ResetRoomID()
		return nil
	case dsession.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown DSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DSessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DSessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DSessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DSessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DSessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DSession edge %s", name)
}

// DUserMutation represents an operation that mutates the DUser nodes in the graph.
type DUserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	name          *string
	password_hash *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DUser, error)
	predicates    []predicate.DUser
}

var _ ent.Mutation = (*DUserMutation)(nil)

// duserOption allows management of the mutation configuration using functional options.
type duserOption func(*DUserMutation)

// newDUserMutation creates new mutation for the DUser entity.
func newDUserMutation(c config, op Op, opts ...duserOption) *DUserMutation {
	m := &DUserMutation{
		config:        c,
		op:            op,
		typ:           TypeDUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDUserID sets the ID field of the mutation.
func withDUserID(id string) duserOption {
	return func(m *DUserMutation) {
		var (
			err   error
			once  sync.Once
			value *DUser
		)
		m.oldValue = func(ctx context.Context) (*DUser, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DUser.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDUser sets the old DUser of the mutation.
func withDUser(node *DUser) duserOption {
	return func(m *DUserMutation) {
		m.oldValue = func(context.Context) (*DUser, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DUserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DUserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DUser entities.
func (m *DUserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DUserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *DUserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DUserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DUser entity.
// If the DUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DUserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DUserMutation) ResetName() {
	m.name = nil
}

// SetPasswordHash sets the "password_hash" field.
func (m *DUserMutation) SetPasswordHash(s string) {
	m.password_hash = &s
}

// PasswordHash returns the value of the "password_hash" field in the mutation.
func (m *DUserMutation) PasswordHash() (r string, exists bool) {
	v := m.password_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordHash returns the old "password_hash" field's value of the DUser entity.
// If the DUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DUserMutation) OldPasswordHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPasswordHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPasswordHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordHash: %w", err)
	}
	return oldValue.PasswordHash, nil
}

// ResetPasswordHash resets all changes to the "password_hash" field.
func (m *DUserMutation) ResetPasswordHash() {
	m.password_hash = nil
}

// SetCreateTime sets the "create_time" field.
func (m *DUserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DUserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DUser entity.
// If the DUser object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DUserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DUserMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the DUserMutation builder.
func (m *DUserMutation) Where(ps ...predicate.DUser) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DUserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DUser).
func (m *DUserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DUserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, duser.FieldName)
	}
	if m.password_hash != nil {
		fields = append(fields, duser.FieldPasswordHash)
	}
	if m.create_time != nil {
		fields = append(fields, duser.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DUserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case duser.FieldName:
		return m.Name()
	case duser.FieldPasswordHash:
		return m.PasswordHash()
	case duser.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DUserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case duser.FieldName:
		return m.OldName(ctx)
	case duser.FieldPasswordHash:
		return m.OldPasswordHash(ctx)
	case duser.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown DUser field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DUserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case duser.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case duser.FieldPasswordHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordHash(v)
		return nil
	case duser.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown DUser field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DUserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DUserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DUserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DUser numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DUserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DUserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DUserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DUser nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DUserMutation) ResetField(name string) error {
	switch name {
	case duser.FieldName:
		m.ResetName()
		return nil
	case duser.FieldPasswordHash:
		m.ResetPasswordHash()
		return nil
	case duser.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown DUser field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DUserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DUserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DUserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DUserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DUserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DUserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DUserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DUser unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DUserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DUser edge %s", name)
}
