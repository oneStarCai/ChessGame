// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/orestonce/ChessGame/ent/droom"
)

// DRoom is the model entity for the DRoom schema.
type DRoom struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// IsGameRunning holds the value of the "is_game_running" field.
	IsGameRunning bool `json:"is_game_running,omitempty"`
	// Panel holds the value of the "panel" field.
	Panel string `json:"panel,omitempty"`
	// WUserID holds the value of the "w_user_id" field.
	WUserID string `json:"w_user_id,omitempty"`
	// BUserID holds the value of the "b_user_id" field.
	BUserID string `json:"b_user_id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DRoom) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case droom.FieldIsGameRunning:
			values[i] = new(sql.NullBool)
		case droom.FieldID, droom.FieldPanel, droom.FieldWUserID, droom.FieldBUserID:
			values[i] = new(sql.NullString)
		case droom.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DRoom", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DRoom fields.
func (d *DRoom) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case droom.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				d.ID = value.String
			}
		case droom.FieldIsGameRunning:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_game_running", values[i])
			} else if value.Valid {
				d.IsGameRunning = value.Bool
			}
		case droom.FieldPanel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field panel", values[i])
			} else if value.Valid {
				d.Panel = value.String
			}
		case droom.FieldWUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field w_user_id", values[i])
			} else if value.Valid {
				d.WUserID = value.String
			}
		case droom.FieldBUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field b_user_id", values[i])
			} else if value.Valid {
				d.BUserID = value.String
			}
		case droom.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DRoom.
// Note that you need to call DRoom.Unwrap() before calling this method if this DRoom
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *DRoom) Update() *DRoomUpdateOne {
	return (&DRoomClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the DRoom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *DRoom) Unwrap() *DRoom {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: DRoom is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *DRoom) String() string {
	var builder strings.Builder
	builder.WriteString("DRoom(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", is_game_running=")
	builder.WriteString(fmt.Sprintf("%v", d.IsGameRunning))
	builder.WriteString(", panel=")
	builder.WriteString(d.Panel)
	builder.WriteString(", w_user_id=")
	builder.WriteString(d.WUserID)
	builder.WriteString(", b_user_id=")
	builder.WriteString(d.BUserID)
	builder.WriteString(", create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DRooms is a parsable slice of DRoom.
type DRooms []*DRoom

func (d DRooms) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
